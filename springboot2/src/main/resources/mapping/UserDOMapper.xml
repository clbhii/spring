<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.cl.springboot2.dao.UserDAO" >
  <resultMap id="BaseResultMap" type="com.cl.springboot2.model.UserDO" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="user_name" property="userName" jdbcType="VARCHAR" />
    <result column="password" property="password" jdbcType="VARCHAR" />
    <result column="email" property="email" jdbcType="VARCHAR" />
    <result column="date_create" property="dateCreate" jdbcType="TIMESTAMP" />
    <result column="date_update" property="dateUpdate" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, user_name, password, email, date_create, date_update
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from user
    where id = #{id,jdbcType=BIGINT}
  </select>
  <select id="selectByUserNameAndPassword" resultMap="BaseResultMap" parameterType="map" >
    select
    <include refid="Base_Column_List" />
    from user
    where user_name = #{userName,jdbcType=VARCHAR}
    and password = #{password,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from user
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.cl.springboot2.model.UserDO" >
    insert into user (id, user_name, password, 
      email
      )
    values (#{id,jdbcType=BIGINT}, #{userName,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, 
      #{email,jdbcType=VARCHAR}
      )
  </insert>

  <update id="updateByPrimaryKey" parameterType="com.cl.springboot2.model.UserDO" >
    update user
    set user_name = #{userName,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>

  <sql id="criteria_sql">
    <where>
      <if test="userName != null">
        user_name like '%${userName}%'
      </if>
    </where>
  </sql>

  <select id="selectList" resultMap="BaseResultMap" parameterType="map" >
    select
    <include refid="Base_Column_List" />
    from user
    <include refid="criteria_sql"/>
    <if test="page != null">
      limit #{page.start},#{page.pageSize}
    </if>
  </select>
  <select id="countList" resultType="int" parameterType="map">
    SELECT
    count(1) count
    FROM
    user
    <include refid="criteria_sql"/>
  </select>
</mapper>